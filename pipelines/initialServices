#!groovy
node {   
// '##################Creditial SETUP########################'
def GIT_URL = 'git@github.com:YandongWu/microServicesPracticePipelineJenkins.git'
def GIT_CRED = 'wuyd-private-key'
def Service_EXPOSE_PORT1 = 8091
def Service_EXPOSE_PORT2 = 8092
def Service_EXPOSE_PORT3 = 8093
// '##################DOCKER SETUP#########################'
def Service_PRODUCT_NAME="microservice-service"
def NETWORK_NAME="micros-network"
def Service_CONTAINER_NAME="${Service_PRODUCT_NAME}"
def Service_DEPLOY_IMAGE_NAME="${Service_PRODUCT_NAME}"
def Service_DEPLOY_IMAGE_TAG="build" + env.BUILD_NUMBER
def Service_INVALID_IMAGE_NUMBER= env.BUILD_NUMBER.toInteger() - 3
def Service_INVALID_IMAGE_NAME="${Service_DEPLOY_IMAGE_NAME}:build${Service_INVALID_IMAGE_NUMBER}"

//################# CI PART ###################################
    stage('Setup Environment') {
        checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: GIT_CRED, url: GIT_URL]]])
    }
    stage('Build service and prepare the docker image.') {
        sh 'chmod +x ./greeting-service/gradlew'
		sh "cd greeting-service; ./gradlew clean build; docker build -t ${Service_DEPLOY_IMAGE_NAME}:${Service_DEPLOY_IMAGE_TAG} ."
    }
	stage('Deploy') {
		def containerStatus = "CONTAINER_IS_EXIST=\"\$(docker ps -aq -f name=${Service_CONTAINER_NAME})\""
        def removeContainer = """
            if [ ! -z \"\$CONTAINER_IS_EXIST\" ]; then
                docker ps -aq -f name=${Service_CONTAINER_NAME}| xargs docker rm -f;\
            fi
        """
        def imageStatus = "INVALID_IMAGE_IS_EXIST=\"\$(docker images -q ${Service_INVALID_IMAGE_NAME})\""
        def removeImage = """
            if [ ! -z \"\$INVALID_IMAGE_IS_EXIST\" ]; then
                docker rmi -f ${Service_INVALID_IMAGE_NAME};\\
            fi
        """	
		
		def networkStatus = "NETWORK_IS_EXIST=\"\$(docker network list -f name=${NETWORK_NAME} -q)\""
        def createNetwork = """
            if [ -z \"\$NETWORK_IS_EXIST\" ]; then
                docker network create ${NETWORK_NAME};\
            fi
        """
		
				  
		sh """
			${containerStatus}
			${removeContainer}
			${imageStatus}
			${removeImage}
			${networkStatus}
			${createNetwork}
		"""
		sh """
            docker run -d -p ${Service_EXPOSE_PORT1}:9001 --restart=unless-stopped --name ${Service_CONTAINER_NAME}1  ${Service_DEPLOY_IMAGE_NAME}:${Service_DEPLOY_IMAGE_TAG};\
			docker network connect ${NETWORK_NAME} ${Service_CONTAINER_NAME}1
			docker run -d -p ${Service_EXPOSE_PORT2}:9001 --restart=unless-stopped --name ${Service_CONTAINER_NAME}2  ${Service_DEPLOY_IMAGE_NAME}:${Service_DEPLOY_IMAGE_TAG};\
			docker network connect ${NETWORK_NAME} ${Service_CONTAINER_NAME}2
			docker run -d -p ${Service_EXPOSE_PORT3}:9001 --restart=unless-stopped --name ${Service_CONTAINER_NAME}3  ${Service_DEPLOY_IMAGE_NAME}:${Service_DEPLOY_IMAGE_TAG};\
			docker network connect ${NETWORK_NAME} ${Service_CONTAINER_NAME}3
		"""
    }
	
	}
